(define custom-activate-default-im-name? #t)
(define custom-preserved-default-im-name 'byeoru)
(define default-im-name 'byeoru)
(define enabled-im-list '(byeoru))
(define enable-im-switch? #f)

(define uim-xim-use-xft-font? #t)
(define uim-xim-xft-font-name "D2Coding")
(define xkb-save-map? #t)
(define xkb-map-path "/home/riey/.uim.d/xkb-map")

(define byeoru-layout 'byeoru-layout-hangul2)
(define byeoru-jamo-orderedness 'ordered)
(define byeoru-esc-turns-off? #t)
(define byeoru-commit-by-word? #f)
(define byeoru-shifted-romaja-isolates-vowel? #f)
(define byeoru-nr-candidate-max 10)
(define byeoru-symbol-cache-size 5)
(define byeoru-conversion-history-size 1000)
(define byeoru-conversion-history-path "/home/riey/.uim.d/byeoru/byeoru-history")
(define byeoru-personal-dict-path "/home/riey/.uim.d/byeoru/byeoru-dict")
(define byeoru-sys-dict-path "/usr/share/uim/byeoru-data/byeoru-dict")
(define byeoru-refresh-xkb-map-at-switch-on? #f)
(define byeoru-compatibility-jamos-for-incomplete-syllables? #t)

(define generic-on-key '("<Shift> "))
(define generic-on-key? (make-key-predicate '("<Shift> ")))
(define generic-off-key '("<Shift> "))
(define generic-off-key? (make-key-predicate '("<Shift> ")))
(define generic-begin-conv-key '(" "))
(define generic-begin-conv-key? (make-key-predicate '(" ")))
(define generic-commit-key '("<IgnoreCase><Control>j" generic-return-key))
(define generic-commit-key? (make-key-predicate '("<IgnoreCase><Control>j" generic-return-key?)))
(define generic-cancel-key '("escape" "<Control>[" "<IgnoreCase><Control>g"))
(define generic-cancel-key? (make-key-predicate '("escape" "<Control>[" "<IgnoreCase><Control>g")))
(define generic-next-candidate-key '(" " "down" "<IgnoreCase><Control>n"))
(define generic-next-candidate-key? (make-key-predicate '(" " "down" "<IgnoreCase><Control>n")))
(define generic-prev-candidate-key '("up" "<IgnoreCase><Control>p"))
(define generic-prev-candidate-key? (make-key-predicate '("up" "<IgnoreCase><Control>p")))
(define generic-next-page-key '("next"))
(define generic-next-page-key? (make-key-predicate '("next")))
(define generic-prev-page-key '("prior"))
(define generic-prev-page-key? (make-key-predicate '("prior")))'))')'))')'))')'))')"]")'))"]")')'))')'))')'))')'))')
